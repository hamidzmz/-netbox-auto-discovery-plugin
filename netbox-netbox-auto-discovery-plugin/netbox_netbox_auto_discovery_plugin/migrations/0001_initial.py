# Generated by Django for NetBox Auto Discovery Plugin

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import utilities.json


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dcim', '0001_initial'),
        ('ipam', '0001_initial'),
        ('extras', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Scanner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(help_text='Unique name for this scanner', max_length=100, unique=True)),
                ('scanner_type', models.CharField(choices=[('network_range', 'Network Range Scan'), ('cisco_switch', 'Cisco Switch Scan')], help_text='Type of scanner (Network Range or Cisco Switch)', max_length=50)),
                ('status', models.CharField(choices=[('active', 'Active'), ('disabled', 'Disabled')], default='active', help_text='Current status of the scanner', max_length=50)),
                ('description', models.TextField(blank=True, help_text='Optional description for this scanner')),
                ('cidr_range', models.CharField(blank=True, help_text='CIDR notation for network range scan (e.g., 192.168.1.0/24)', max_length=100)),
                ('target_hostname', models.CharField(blank=True, help_text='Hostname or IP address of the target device', max_length=255)),
                ('connection_protocol', models.CharField(blank=True, choices=[('ssh', 'SSH'), ('snmp_v2c', 'SNMP v2c'), ('snmp_v3', 'SNMP v3')], help_text='Protocol to use for device connection', max_length=50)),
                ('ssh_username', models.CharField(blank=True, help_text='SSH username for device access', max_length=100)),
                ('ssh_password', models.CharField(blank=True, help_text='SSH password (will be encrypted)', max_length=255)),
                ('ssh_port', models.PositiveIntegerField(default=22, help_text='SSH port number', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)])),
                ('snmp_community', models.CharField(blank=True, help_text='SNMP community string (v2c)', max_length=100)),
                ('snmp_port', models.PositiveIntegerField(default=161, help_text='SNMP port number', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)])),
                ('snmp_v3_username', models.CharField(blank=True, help_text='SNMPv3 username', max_length=100)),
                ('snmp_v3_auth_protocol', models.CharField(blank=True, help_text='SNMPv3 authentication protocol (MD5, SHA)', max_length=20)),
                ('snmp_v3_auth_key', models.CharField(blank=True, help_text='SNMPv3 authentication key', max_length=255)),
                ('snmp_v3_priv_protocol', models.CharField(blank=True, help_text='SNMPv3 privacy protocol (DES, AES)', max_length=20)),
                ('snmp_v3_priv_key', models.CharField(blank=True, help_text='SNMPv3 privacy key', max_length=255)),
                ('scan_interval_hours', models.PositiveIntegerField(blank=True, help_text='Automatic scan interval in hours (leave blank for manual only)', null=True)),
                ('site', models.ForeignKey(blank=True, help_text='Associated NetBox site for discovered resources', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scanners', to='dcim.site')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'Scanner',
                'verbose_name_plural': 'Scanners',
            },
        ),
        migrations.CreateModel(
            name='ScanRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', help_text='Current status of this scan run', max_length=50)),
                ('started_at', models.DateTimeField(blank=True, help_text='Timestamp when the scan started', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='Timestamp when the scan completed', null=True)),
                ('ips_discovered', models.PositiveIntegerField(default=0, help_text='Number of IP addresses discovered')),
                ('devices_discovered', models.PositiveIntegerField(default=0, help_text='Number of devices discovered')),
                ('interfaces_discovered', models.PositiveIntegerField(default=0, help_text='Number of interfaces discovered')),
                ('vlans_discovered', models.PositiveIntegerField(default=0, help_text='Number of VLANs discovered')),
                ('log_output', models.TextField(blank=True, help_text='Detailed log output from the scan')),
                ('error_message', models.TextField(blank=True, help_text='Error message if the scan failed')),
                ('job_id', models.UUIDField(blank=True, help_text='NetBox job ID for background execution', null=True)),
                ('scanner', models.ForeignKey(help_text='Scanner that executed this run', on_delete=django.db.models.deletion.CASCADE, related_name='scan_runs', to='netbox_netbox_auto_discovery_plugin.scanner')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'ordering': ('-created',),
                'verbose_name': 'Scan Run',
                'verbose_name_plural': 'Scan Runs',
            },
        ),
        migrations.CreateModel(
            name='DiscoveredIPAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('action', models.CharField(choices=[('created', 'Created'), ('updated', 'Updated')], help_text='Whether the IP address was created or updated', max_length=20)),
                ('hostname', models.CharField(blank=True, help_text='Discovered hostname (if available)', max_length=255)),
                ('open_ports', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, help_text='List of discovered open ports', null=True, size=None)),
                ('services', models.JSONField(blank=True, help_text='Discovered services and their details', null=True)),
                ('ip_address', models.ForeignKey(help_text='NetBox IP address that was discovered/updated', on_delete=django.db.models.deletion.CASCADE, related_name='discovery_records', to='ipam.ipaddress')),
                ('scan_run', models.ForeignKey(help_text='Scan run that discovered this IP address', on_delete=django.db.models.deletion.CASCADE, related_name='discovered_ips', to='netbox_netbox_auto_discovery_plugin.scanrun')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'ordering': ('-created',),
                'verbose_name': 'Discovered IP Address',
                'verbose_name_plural': 'Discovered IP Addresses',
            },
        ),
        migrations.CreateModel(
            name='DiscoveredDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('action', models.CharField(choices=[('created', 'Created'), ('updated', 'Updated')], help_text='Whether the device was created or updated', max_length=20)),
                ('discovered_data', models.JSONField(blank=True, help_text='Raw data captured during discovery', null=True)),
                ('device', models.ForeignKey(help_text='NetBox device that was discovered/updated', on_delete=django.db.models.deletion.CASCADE, related_name='discovery_records', to='dcim.device')),
                ('scan_run', models.ForeignKey(help_text='Scan run that discovered this device', on_delete=django.db.models.deletion.CASCADE, related_name='discovered_devices', to='netbox_netbox_auto_discovery_plugin.scanrun')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'ordering': ('-created',),
                'verbose_name': 'Discovered Device',
                'verbose_name_plural': 'Discovered Devices',
            },
        ),
    ]
